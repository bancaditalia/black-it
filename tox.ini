[tox]
isolated_build = True
envlist = bandit, check-copyright, black-check, vulture, mypy, py3{9,10,11,12,13}, docs

[tox:.package]
# note tox will use the same python version as under what tox is installed to package
# so unless this is python 3 you can require a given python version for the packaging
# environment via the basepython key
basepython = python3

[testenv]
# From Poetry FAQ "Is tox supported?" (https://python-poetry.org/docs/faq/#use-case-2)
allowlist_externals =
    make
    poetry
skip_install = True
setenv =
    PYTHONPATH = {toxinidir}

[testenv:py{39,310,311,312,313}]
commands_pre =
    poetry install --only main,testenv --sync
commands =
    pytest \
        --basetemp={envtmpdir} \
        black_it tests/ \
        --cov=black_it \
        --ignore=example/models \
        --cov-report=xml \
        --cov-report=html \
        --cov-report=term {posargs}

# test environment for notebooks
[testenv:py{39,310,311,312,313}-nb]
commands_pre =
    poetry install --only main,testenv,testenv_notebooks --sync
commands = pytest examples/tests_on_toy_model.ipynb --nbmake --nbmake-timeout=300

[testenv:mypy]
commands_pre =
    poetry install --only main,testenv,mypy --sync
commands = make static

[testenv:black]
skip_install = True
commands_pre =
    poetry install --only black --sync
commands = make black

[testenv:black-check]
skip_install = True
commands_pre =
    poetry install --only black --sync
commands = make black-check

[testenv:ruff]
skip_install = True
commands_pre =
    poetry install --only ruff --sync
commands = make ruff

[testenv:ruff-check]
skip_install = True
commands_pre =
    poetry install --only ruff --sync
commands = make ruff-check

[testenv:bandit]
skipsdist = True
skip_install = True
commands_pre =
    poetry install --only bandit --sync
commands = make bandit

[testenv:vulture]
skipsdist = True
skip_install = True
commands_pre =
    poetry install --only vulture --sync
commands = make vulture

[testenv:darglint]
skipsdist = True
skip_install = True
commands_pre =
    poetry install --only darglint --sync
commands = make darglint

[testenv:docs]
commands_pre =
    poetry install --only main,docs --sync
commands =
    mkdocs build --clean

[testenv:docs-serve]
commands_pre =
    poetry install --only main,docs --sync
commands = make servedocs

[testenv:check-copyright]
skip_install = True
deps =
commands = make check-copyright

[testenv:spell_check]
skip_install = True
deps =
allowlist_externals = {toxinidir}/scripts/spell-check.sh
commands = {toxinidir}/scripts/spell-check.sh --report
