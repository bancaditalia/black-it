[tox]
isolated_build = True
envlist = bandit, check-copyright, black-check, vulture, mypy, py3{9,10,11,12}, docs

[tox:.package]
# note tox will use the same python version as under what tox is installed to package
# so unless this is python 3 you can require a given python version for the packaging
# environment via the basepython key
basepython = python3

[testenv]
# From Poetry FAQ "Is tox supported?" (https://python-poetry.org/docs/faq/#use-case-2)
allowlist_externals =
    poetry
skip_install = True
setenv =
    PYTHONPATH = {toxinidir}

[testenv:py{39,310,311,312}]
commands_pre =
    poetry install --only main,testenv --sync
commands =
    pytest \
        --basetemp={envtmpdir} \
        black_it tests/ \
        --cov=black_it \
        --ignore=example/models \
        --cov-report=xml \
        --cov-report=html \
        --cov-report=term {posargs}

# test environment for notebooks
[testenv:py{39,310,311,312}-nb]
commands_pre =
    poetry install --only main,testenv,testenv_notebooks --sync
commands = pytest examples/tests_on_toy_model.ipynb --nbmake --nbmake-timeout=300

[testenv:mypy]
commands_pre =
    poetry install --only main,testenv,mypy --sync
commands =
    mypy black_it tests scripts examples

[testenv:black]
skip_install = True
commands_pre =
   poetry install --only black
commands = black .

[testenv:black-check]
skip_install = True
commands_pre =
   poetry install --only black
commands = black --check --verbose .

[testenv:ruff]
skip_install = True
commands_pre =
    poetry install --only ruff
commands = ruff check --fix --show-fixes .

[testenv:ruff-check]
skip_install = True
commands_pre =
    poetry install --only ruff
commands = ruff check .

[testenv:bandit]
skipsdist = True
skip_install = True
commands_pre =
    poetry install --only bandit --sync
commands = bandit --configfile .bandit.yaml --recursive black_it tests scripts examples

[testenv:vulture]
skipsdist = True
skip_install = True
commands_pre =
    poetry install --only vulture --sync
commands =
    vulture black_it scripts/whitelists/package_whitelist.py
    vulture examples scripts/whitelists/examples_whitelist.py
    vulture tests scripts/whitelists/tests_whitelist.py

[testenv:darglint]
skipsdist = True
skip_install = True
deps =
    darglint==1.8.1
commands = darglint black_it

[testenv:docs]
deps =
    markdown-include==0.8.1
    markdown==3.7
    mkdocs-autorefs==0.5.0
    mkdocs-material-extensions==1.3.1
    mkdocs-material==9.6.11
    mkdocs==1.6.1
    mkdocstrings-python-legacy==0.2.3
    mkdocstrings==0.22.0
    mknotebooks==0.8.0
    pymdown-extensions==10.14.3
commands =
    mkdocs build --clean

[testenv:docs-serve]
deps =
    markdown-include==0.8.1
    markdown==3.7
    mkdocs-autorefs==0.5.0
    mkdocs-material-extensions==1.3.1
    mkdocs-material==9.6.11
    mkdocs==1.6.1
    mkdocstrings-python-legacy==0.2.3
    mkdocstrings==0.22.0
    mknotebooks==0.8.0
    pymdown-extensions==10.14.3
commands =
    mkdocs build --clean
    python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
    mkdocs serve

[testenv:check-copyright]
skip_install = True
deps =
commands = python3 scripts/check_copyright.py

[testenv:spell_check]
skip_install = True
deps =
allowlist_externals = {toxinidir}/scripts/spell-check.sh
commands = {toxinidir}/scripts/spell-check.sh --report
