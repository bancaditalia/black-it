name: test

on:
  pull_request:

jobs:

  lint:
    continue-on-error: False
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@master
        with:
          python-version: 3.8
      - name: Install Poetry
        run: pip install poetry
      - name: Get list of modified files
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          BASE_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          HEAD_BRANCH=${{ github.head_ref }}
          current_revision=$(git rev-parse --short HEAD)

          # make local copy of branches to track remote ones (default behaviour of 'git checkout')
          git fetch origin ${HEAD_BRANCH}
          git checkout -t origin/${HEAD_BRANCH}
          git fetch origin ${BASE_BRANCH}
          git checkout -t origin/${BASE_BRANCH}

          # restore HEAD
          git checkout ${current_revision}
          
          echo "Computing changed files..."
          PY_FILES_CHANGED="$(./scripts/get-changed-files.sh ${BASE_BRANCH} ${HEAD_BRANCH} "\.py$")"

          # get-changed-files.sh prints a list of file names, each on a new line
          # Our make commands want a space-separated list of files.
          # Let's replace newlines with spaces in PY_FILES_CHANGED. Our make
          # targets are anyway broken when dealing with file names containing
          # spaces.
          PY_FILES_CHANGED="$(echo "${PY_FILES_CHANGED}" | tr -s '\n' ' ' | sed -e 's/[[:space:]]*$//')"
          echo "Python files changed (space-separated): '${PY_FILES_CHANGED}'"

          echo 'PY_FILES_CHANGED<<EOF' >> $GITHUB_ENV
          echo "${PY_FILES_CHANGED}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Check copyright
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: ./scripts/check_copyright.py
      - name: Install dependencies for linting
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: |
          pip install -r <(./scripts/list-poetry-dependencies.sh \
            flake8             \
            flake8-bugbear     \
            flake8-docstrings  \
            flake8-eradicate   \
            flake8-isort       \
            pydocstyle         \
            black              \
            isort              \
            darglint           \
            vulture            \
          )
      - name: Code style check (only changed files)
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: |
          PY_FILES_CHANGED="${{ env.PY_FILES_CHANGED }}"
          echo "Files changed: '${PY_FILES_CHANGED}'"
          make black-check-files files="${PY_FILES_CHANGED}"
          make isort-check-files files="${PY_FILES_CHANGED}"
          make flake8-files files="${PY_FILES_CHANGED}"
          make darglint-files files="${PY_FILES_CHANGED}"
          make vulture
      - name: Install dependencies for static type checking
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: |
          pip install -r <(./scripts/list-poetry-dependencies.sh \
            mypy                                       \
            numpy                                      \
            hypothesis                                 \
          )
      - name: Static type check
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: |
          PY_FILES_CHANGED="${{ env.PY_FILES_CHANGED }}"
          make static-files files="${PY_FILES_CHANGED}"
      - name: Install dependencies for Pylint checks
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: |
          # install the package
          pip install .
          # install other importable dependencies
          pip install -r <(./scripts/list-poetry-dependencies.sh \
            pylint                                     \
            pytest                                     \
            hypothesis                                 \
            mesa                                       \
            mistletoe                                  \
          )
      - name: Pylint
        if: ${{ env.PY_FILES_CHANGED != '' }}
        run: |
          PY_FILES_CHANGED="${{ env.PY_FILES_CHANGED }}"
          make pylint-files files="${PY_FILES_CHANGED}"
      - name: Misc checks
        run: |
          pip install -r <(./scripts/list-poetry-dependencies.sh \
            bandit             \
            safety             \
          )
          make bandit
          make safety

  test:
    continue-on-error: True
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - lint
    strategy:
      matrix:
        python_version: [3.8]

    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python_version }}
    - name: Install Tox and Poetry
      run: pip install tox poetry
#    # set up environment depending on the platform in use
#    - if: matrix.os == 'ubuntu-latest'
#      name: Install dependencies (ubuntu-latest)
#      run: ...
#    - if: matrix.os == 'macos-latest'
#      name: Install dependencies (macos-latest)
#      run: ...
#    - if: matrix.os == 'windows-latest'
#      name: Install dependencies (windows-latest)
#      env:
#        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
#      run: ...
    - name: Unit tests and coverage
      run: |
        tox -e py${{ matrix.python_version }} -- -m 'not e2e'
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v1
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }}
#        file: ./coverage.xml
#        flags: unittests
#        name: codecov-umbrella
#        fail_ci_if_error: true
    - name: Notebook tests
      run: |
        tox -e py${{ matrix.python_version }}-nb
