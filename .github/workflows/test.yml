name: test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  run:
    continue-on-error: True
    runs-on: ${{ matrix.os }}
    env:
      OSX_VERSION: ""

    strategy:
      matrix:
        # on macos-latest instead of macos-latest, see https://github.com/bancaditalia/black-it/issues/79
        os: [macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11"]

    timeout-minutes: 30

    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run:  pip install tox poetry
#    # set up environment depending on the platform in use
#    - if: matrix.os == 'ubuntu-latest'
#      name: Install dependencies (ubuntu-latest)
#      run: ...
#    - if: matrix.os == 'macos-latest'
#      name: Install dependencies (macos-latest)
#      run: ...
#    - if: matrix.os == 'windows-latest'
#      name: Install dependencies (windows-latest)
#      env:
#        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
#      run: ...
    - if: matrix.os == 'macos-latest'
      name: Read MacOS version
      shell: bash
      run: |
        VERSION=$(sw_vers -productVersion)
        echo "MacOS version is $VERSION"
        echo "OSX_VERSION=${VERSION}" >> $GITHUB_ENV
    - if: env.OSX_VERSION == '12.7.1'
      name: Install dependencies (macos-latest)
      shell: bash
      run: |
        pip install cython==0.29.36
        # for some reason this seems to be a necessary step for MacOS images, but not for Ubuntu and Windows
        brew install hdf5
        brew install c-blosc
        # https://stackoverflow.com/questions/73029883/could-not-find-hdf5-installation-for-pytables-on-m1-mac
        echo "$(brew --prefix hdf5)"
        echo "$(brew --prefix c-blosc)"
        echo "HDF5_DIR=$(brew --prefix hdf5)" >> $GITHUB_ENV
        echo "BLOSC_DIR=$(brew --prefix c-blosc)" >> $GITHUB_ENV
        pip install --no-cache-dir --no-binary=tables tables==3.8.0
    - if: ${{ (matrix.os == 'ubuntu-latest') || (matrix.os == 'macos-latest') }}
      name: Unit tests and coverage (ubuntu-latest, macos-latest)
      run: |
        pyver=`echo ${{ matrix.python-version }} | tr -d "."`
        tox -e py${pyver} -- -m 'not e2e'
        tox -e py${pyver}-nb
    - if: ${{ (matrix.os == 'ubuntu-latest') || (matrix.os == 'macos-latest') }}
      name: Notebook tests (ubuntu-latest, macos-latest)
      run: |
        pyver=`echo ${{ matrix.python-version }} | tr -d "."`
        tox -e py${pyver}-nb
    - if: matrix.os == 'windows-latest'
      name: Unit tests and coverage (windows-latest)
      run: |
        $pyver = "${{ matrix.python-version }}" -replace '\.'
        tox -e "py$pyver" -- -m 'not e2e' | Tee-Object output.txt -ErrorAction SilentlyContinue
        .\scripts\check-tox-output.ps1 output.txt
    - if: matrix.os == 'windows-latest'
      name: Notebook tests (windows-latest)
      run: |
        $pyver = "${{ matrix.python-version }}" -replace '\.'
        tox -e "py$pyver-nb" | Tee-Object output.txt -ErrorAction SilentlyContinue
        .\scripts\check-tox-output.ps1 output.txt
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false
