#!/usr/bin/env python3
# Black-box ABM Calibration Kit (Black-it)
# Copyright (C) 2021-2024 Banca d'Italia
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
"""Read a poetry.lock file, and parse its first line. Returns the poetry version if found."""

from __future__ import annotations

import argparse
import logging
import pathlib
import re
import sys

MYDIR = pathlib.Path(__file__).resolve().parent

logger = logging.getLogger(__name__)


def parse_args(args_list: list[str] = sys.argv[1:]) -> argparse.Namespace:
    """Read the path to the lockfile from command line."""
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="""\
            Reads a poetry.lock file, and parses its first line. If it is a
            comment of the form:

            "# This file is automatically @generated by Poetry <version> and should not be changed by hand."

            Then it prints the version on stdout.
            Otherwise exits with an error.
            """,
    )
    parser.add_argument(
        "lockfile_path",
        nargs="?",
        type=pathlib.Path,
        default=MYDIR.parent / "poetry.lock",
        help="path to poetry.lock",
    )
    return parser.parse_args(args_list)


def main(lockfile_path: pathlib.Path) -> str:
    """Read the first line of the lockfile and estimate the Poetry version that generated it."""
    lockfile_path = lockfile_path.resolve()
    msg = f"reading lockfile {lockfile_path}"
    logger.info(msg)
    with lockfile_path.open("r") as f:
        first_line = f.readline().strip("\n")
    match = re.match(
        r"^# This file is automatically [@]?generated by Poetry (?P<version>[0-9\.]*) and should not be changed by hand.$",  # noqa: E501
        first_line,
    )
    if match is None:
        msg = "Could not find a version"
        raise ValueError(msg)
    return match.group("version")


if __name__ == "__main__":
    args = parse_args()
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    )
    try:
        print(main(args.lockfile_path))
    except (FileNotFoundError, IsADirectoryError, ValueError) as e:
        logger.error(e)  # noqa: TRY400
        sys.exit(1)
