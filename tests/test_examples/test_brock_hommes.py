# Black-box ABM Calibration Kit (Black-it)
# Copyright (C) 2021-2023 Banca d'Italia
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Test the Brock-Hommes model implementation."""

import numpy as np

from examples.models.economics.brock_hommes import BH2, BH4


def test_bh2_model() -> None:
    """Test the BH2 model."""
    theta = [0.0, 0.0, 1.2, 0.0]
    n = 100
    seed = 42
    expected_output = np.array(
        [
            [0.054545454545454536],
            [0.057884173981576546],
            [0.061465373030809616],
            [0.06526881932912042],
            [0.06930749958647368],
            [0.07359593736440108],
            [0.0781495490549261],
            [0.08298469692403304],
            [0.08811874599663422],
            [0.09357012415001409],
            [0.09935838553640525],
            [0.10550427746327425],
            [0.11202981085244657],
            [0.11895833438817309],
            [0.12631461244880582],
            [0.13412490689588047],
            [0.1424170627668405],
            [0.15122059788186307],
            [0.16056679632940538],
            [0.17048880573693276],
            [0.18102173816007186],
            [0.1922027743318159],
            [0.2040712708993152],
            [0.21666887013424],
            [0.230039611427605],
            [0.24423004366382686],
            [0.25928933730245984],
            [0.2752693946682064],
            [0.2922249565464388],
            [0.3102137026852638],
            [0.3292963431945334],
            [0.3495366970802194],
            [0.3710017532254016],
            [0.39376170798416926],
            [0.4178899721379745],
            [0.44346313820655486],
            [0.4705608969191503],
            [0.4992658889222942],
            [0.5296634743795545],
            [0.561841398811561],
            [0.5958893280739219],
            [0.6318982184322344],
            [0.669959478803287],
            [0.7101638707568677],
            [0.752600076939964],
            [0.7973528489739922],
            [0.8445006198565632],
            [0.8941124309850734],
            [0.9462439764752686],
            [1.0009325020678153],
            [1.058190204403997],
            [1.117995646119874],
            [1.1802825129562695],
            [1.2449247582474137],
            [1.3117167531408305],
            [1.3803463935524007],
            [1.4503580389356283],
            [1.5211003606685256],
            [1.5916510509033046],
            [1.6607046402209464],
            [1.7263986864132612],
            [1.7860310196501388],
            [1.8355706286039297],
            [1.8687428614840655],
            [1.8751380750588178],
            [1.8357633024848075],
            [1.7107656134707299],
            [1.4003308604575817],
            [0.6806533689475298],
            [0.04446139628947719],
            [0.01652314400222465],
            [0.017499331859411233],
            [0.018582374621397734],
            [0.0197324906413962],
            [0.020953787308585214],
            [0.022250669252540916],
            [0.023627813599807965],
            [0.025090186734393453],
            [0.026643062155726028],
            [0.02829203943304126],
            [0.030043064322216106],
            [0.03190245011488456],
            [0.03387690029357054],
            [0.03597353257063705],
            [0.03819990439306607],
            [0.04056403999944116],
            [0.04307445911998984],
            [0.04574020741513553],
            [0.048570888752681056],
            [0.05157669942846306],
            [0.05476846444003277],
            [0.058157675927574884],
            [0.06175653390080028],
            [0.06557798937484632],
            [0.06963579004217833],
            [0.07394452861096293],
            [0.07851969394320658],
            [0.08337772512790356],
            [0.08853606862525519],
            [0.0],
        ],
    )
    result = BH2(theta, n, seed=seed)
    assert result.shape == (n, 1)
    np.testing.assert_array_almost_equal(result, expected_output, decimal=5)


def test_bh4_model() -> None:
    """Test the BH4 model."""
    theta = [0, 0, 0.9, 0.2, 0.9, -0.2, 1.01, 0, 0.01, 1]
    n = 100
    seed = 42
    expected_output = np.array(
        [
            [0.08922630308955377],
            [0.05634330307256878],
            [0.06414066791141397],
            [0.10508080199462444],
            [0.06465297620368961],
            [0.03484719426768868],
            [0.08615989071274688],
            [0.0913785448619035],
            [0.045053375926644455],
            [0.0518594284576269],
            [0.01784820234069612],
            [-0.0067186064600018615],
            [0.0044211074099892765],
            [-0.07247632349091557],
            [-0.12025482695843324],
            [-0.10683951117309803],
            [-0.11411574029353017],
            [-0.06706413981572737],
            [-0.08159742266533461],
            [-0.11298336100607148],
            [-0.02118343228750438],
            [-0.02181210940529453],
            [-0.012505333335104242],
            [-0.06493466919203203],
            [-0.06777317743401062],
            [-0.04278994714826678],
            [-0.07482654477671165],
            [-0.037818804665372116],
            [-0.04933496149096962],
            [-0.046094271127451104],
            [-0.05581557283042439],
            [0.034347731103219224],
            [0.02512761448471606],
            [-0.024599348685024267],
            [0.014483613538501935],
            [-0.03749490281067554],
            [-0.018848070441442842],
            [-0.0903445511592709],
            [-0.11689354629214414],
            [-0.07402552988455961],
            [-0.0213222075208419],
            [-0.006964839502735555],
            [-0.009134785382048373],
            [-0.01832020700387496],
            [-0.07147812371256342],
            [-0.07928009011168288],
            [-0.07352800331763301],
            [-0.009140520210023257],
            [0.008546944049819353],
            [-0.06352846392417359],
            [-0.03278851202689395],
            [-0.0374368443569739],
            [-0.052935038718777555],
            [-0.012897736194776518],
            [0.03266695765916192],
            [0.06049519104165061],
            [0.00938186044487789],
            [-0.0067468712667628295],
            [0.008106506614296927],
            [0.044569547984167394],
            [0.012741617482752196],
            [0.0008699617587074661],
            [-0.04344780597100196],
            [-0.07846817350512286],
            [-0.023083526873630755],
            [0.038777720968499366],
            [0.02531720124286847],
            [0.05708022146835147],
            [0.0546597682993881],
            [0.012409093566453908],
            [0.02209176221801424],
            [0.07646934910751865],
            [0.05285043719427516],
            [0.09823849499036635],
            [-0.034478225021676856],
            [0.005964825849260701],
            [0.00840848077394073],
            [-0.005946308824872809],
            [-0.0007876637933463152],
            [-0.07916013182054467],
            [-0.06531819165292246],
            [-0.030998771363946246],
            [0.037675659019960714],
            [0.007016669311064504],
            [-0.02775270057141131],
            [-0.03985857414739906],
            [0.00829644879270901],
            [0.019749784337136797],
            [-0.007020082438403985],
            [0.014910909631843444],
            [0.014652643490741945],
            [0.04854568430373574],
            [0.006634050123336816],
            [-0.009202535783939553],
            [-0.022243503584838255],
            [-0.0736884382963828],
            [-0.040546552819254726],
            [-0.017187399613289116],
            [-0.011276721036127601],
            [0.0],
        ]
    )
    result = BH4(theta, n, seed=seed)
    assert result.shape == (n, 1)
    np.testing.assert_array_almost_equal(result, expected_output, decimal=5)
