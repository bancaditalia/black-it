# Black-box ABM Calibration Kit (Black-it)
# Copyright (C) 2021-2023 Banca d'Italia
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Test the Brock-Hommes model implementation."""

import numpy as np

from examples.models.economics.brock_hommes import BH2, BH4


def test_bh2_model() -> None:
    """Test the BH2 model."""
    theta = [0.0, 0.0, 1.2, 0.0]
    n = 100
    seed = 42
    expected_output = np.array(
        [
            [0.054545454545454536],
            [0.057884173981576546],
            [0.061465373030809616],
            [0.06526881932912042],
            [0.06930749958647368],
            [0.07359593736440108],
            [0.0781495490549261],
            [0.08298469692403304],
            [0.08811874599663422],
            [0.09357012415001409],
            [0.09935838553640525],
            [0.10550427746327425],
            [0.11202981085244657],
            [0.11895833438817309],
            [0.12631461244880582],
            [0.13412490689588047],
            [0.1424170627668405],
            [0.15122059788186307],
            [0.16056679632940538],
            [0.17048880573693276],
            [0.18102173816007186],
            [0.1922027743318159],
            [0.2040712708993152],
            [0.21666887013424],
            [0.230039611427605],
            [0.24423004366382686],
            [0.25928933730245984],
            [0.2752693946682064],
            [0.2922249565464388],
            [0.3102137026852638],
            [0.3292963431945334],
            [0.3495366970802194],
            [0.3710017532254016],
            [0.39376170798416926],
            [0.4178899721379745],
            [0.44346313820655486],
            [0.4705608969191503],
            [0.4992658889222942],
            [0.5296634743795545],
            [0.561841398811561],
            [0.5958893280739219],
            [0.6318982184322344],
            [0.669959478803287],
            [0.7101638707568677],
            [0.752600076939964],
            [0.7973528489739922],
            [0.8445006198565632],
            [0.8941124309850734],
            [0.9462439764752686],
            [1.0009325020678153],
            [1.058190204403997],
            [1.117995646119874],
            [1.1802825129562695],
            [1.2449247582474137],
            [1.3117167531408305],
            [1.3803463935524007],
            [1.4503580389356283],
            [1.5211003606685256],
            [1.5916510509033046],
            [1.6607046402209464],
            [1.7263986864132612],
            [1.7860310196501388],
            [1.8355706286039297],
            [1.8687428614840655],
            [1.8751380750588178],
            [1.8357633024848075],
            [1.7107656134707299],
            [1.4003308604575817],
            [0.6806533689475298],
            [0.04446139628947719],
            [0.01652314400222465],
            [0.017499331859411233],
            [0.018582374621397734],
            [0.0197324906413962],
            [0.020953787308585214],
            [0.022250669252540916],
            [0.023627813599807965],
            [0.025090186734393453],
            [0.026643062155726028],
            [0.02829203943304126],
            [0.030043064322216106],
            [0.03190245011488456],
            [0.03387690029357054],
            [0.03597353257063705],
            [0.03819990439306607],
            [0.04056403999944116],
            [0.04307445911998984],
            [0.04574020741513553],
            [0.048570888752681056],
            [0.05157669942846306],
            [0.05476846444003277],
            [0.058157675927574884],
            [0.06175653390080028],
            [0.06557798937484632],
            [0.06963579004217833],
            [0.07394452861096293],
            [0.07851969394320658],
            [0.08337772512790356],
            [0.08853606862525519],
            [0.0],
        ],
    )
    result = BH2(theta, n, seed=seed)
    assert result.shape == (n, 1)
    np.testing.assert_array_almost_equal(result, expected_output, decimal=5)


def test_bh4_model() -> None:
    """Test the BH4 model."""
    theta = [0, 0, 0.9, 0.2, 0.9, -0.2, 1.01, 0, 0.01, 1]
    n = 100
    seed = 42
    expected_output = np.array(
        [
            [0.0892263],
            [0.0563433],
            [0.06414067],
            [0.1050808],
            [0.06465298],
            [0.03484719],
            [0.08615989],
            [0.09137854],
            [0.04505338],
            [0.05185943],
            [0.0178482],
            [-0.00671861],
            [0.00442111],
            [-0.07247632],
            [-0.12025483],
            [-0.10683951],
            [-0.11411574],
            [-0.06706414],
            [-0.08159742],
            [-0.11298336],
            [-0.02118343],
            [-0.02181211],
            [-0.01250533],
            [-0.06493467],
            [-0.06777318],
            [-0.04278995],
            [-0.07482654],
            [-0.0378188],
            [-0.04933496],
            [-0.04609427],
            [-0.05581557],
            [0.03434773],
            [0.02512761],
            [-0.02459935],
            [0.01448361],
            [-0.0374949],
            [-0.01884807],
            [-0.09034455],
            [-0.11689355],
            [-0.07402553],
            [-0.02132221],
            [-0.00696484],
            [-0.00913479],
            [-0.01832021],
            [-0.07147812],
            [-0.07928009],
            [-0.073528],
            [-0.00914052],
            [0.00854694],
            [-0.06352846],
            [-0.03278851],
            [-0.03743684],
            [-0.05293504],
            [-0.01289774],
            [0.03266696],
            [0.06049519],
            [0.00938186],
            [-0.00674687],
            [0.00810651],
            [0.04456955],
            [0.01274162],
            [0.00086996],
            [-0.04344781],
            [-0.07846817],
            [-0.02308353],
            [0.03877772],
            [0.0253172],
            [0.05708022],
            [0.05465977],
            [0.01240909],
            [0.02209176],
            [0.07646935],
            [0.05285044],
            [0.09823849],
            [-0.03447823],
            [0.00596483],
            [0.00840848],
            [-0.00594631],
            [-0.00078766],
            [-0.07916013],
            [-0.06531819],
            [-0.03099877],
            [0.03767566],
            [0.00701667],
            [-0.0277527],
            [-0.03985857],
            [0.00829645],
            [0.01974978],
            [-0.00702008],
            [0.01491091],
            [0.01465264],
            [0.04854568],
            [0.00663405],
            [-0.00920254],
            [-0.0222435],
            [-0.07368844],
            [-0.04054655],
            [-0.0171874],
            [-0.01127672],
            [0.0],
        ],
    )
    result = BH4(theta, n, seed=seed)
    assert result.shape == (n, 1)
    np.testing.assert_array_almost_equal(result, expected_output, decimal=5)
