# Black-box ABM Calibration Kit (Black-it)
# Copyright (C) 2021-2024 Banca d'Italia
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Test the Brock-Hommes model implementation."""

import numpy as np

from examples.models.economics.brock_hommes import BH2, BH4


def test_bh2_model() -> None:
    """Test the BH2 model."""
    theta = [0.0, 0.0, 1.2, 0.0]
    n = 100
    seed = 42
    expected_output = np.array(
        [
            [0.054545454545454536],
            [0.057884173981576546],
            [0.061465373030809616],
            [0.06526881932912042],
            [0.06930749958647368],
            [0.07359593736440108],
            [0.0781495490549261],
            [0.08298469692403304],
            [0.08811874599663422],
            [0.09357012415001409],
            [0.09935838553640525],
            [0.10550427746327425],
            [0.11202981085244657],
            [0.11895833438817309],
            [0.12631461244880582],
            [0.13412490689588047],
            [0.1424170627668405],
            [0.15122059788186307],
            [0.16056679632940538],
            [0.17048880573693276],
            [0.18102173816007186],
            [0.1922027743318159],
            [0.2040712708993152],
            [0.21666887013424],
            [0.230039611427605],
            [0.24423004366382686],
            [0.25928933730245984],
            [0.2752693946682064],
            [0.2922249565464388],
            [0.3102137026852638],
            [0.3292963431945334],
            [0.3495366970802194],
            [0.3710017532254016],
            [0.39376170798416926],
            [0.4178899721379745],
            [0.44346313820655486],
            [0.4705608969191503],
            [0.4992658889222942],
            [0.5296634743795545],
            [0.561841398811561],
            [0.5958893280739219],
            [0.6318982184322344],
            [0.669959478803287],
            [0.7101638707568677],
            [0.752600076939964],
            [0.7973528489739922],
            [0.8445006198565632],
            [0.8941124309850734],
            [0.9462439764752686],
            [1.0009325020678153],
            [1.058190204403997],
            [1.117995646119874],
            [1.1802825129562695],
            [1.2449247582474137],
            [1.3117167531408305],
            [1.3803463935524007],
            [1.4503580389356283],
            [1.5211003606685256],
            [1.5916510509033046],
            [1.6607046402209464],
            [1.7263986864132612],
            [1.7860310196501388],
            [1.8355706286039297],
            [1.8687428614840655],
            [1.8751380750588178],
            [1.8357633024848075],
            [1.7107656134707299],
            [1.4003308604575817],
            [0.6806533689475298],
            [0.04446139628947719],
            [0.01652314400222465],
            [0.017499331859411233],
            [0.018582374621397734],
            [0.0197324906413962],
            [0.020953787308585214],
            [0.022250669252540916],
            [0.023627813599807965],
            [0.025090186734393453],
            [0.026643062155726028],
            [0.02829203943304126],
            [0.030043064322216106],
            [0.03190245011488456],
            [0.03387690029357054],
            [0.03597353257063705],
            [0.03819990439306607],
            [0.04056403999944116],
            [0.04307445911998984],
            [0.04574020741513553],
            [0.048570888752681056],
            [0.05157669942846306],
            [0.05476846444003277],
            [0.058157675927574884],
            [0.06175653390080028],
            [0.06557798937484632],
            [0.06963579004217833],
            [0.07394452861096293],
            [0.07851969394320658],
            [0.08337772512790356],
            [0.08853606862525519],
            [0.0],
        ],
    )
    result = BH2(theta, n, seed=seed)
    assert result.shape == (n, 1)
    np.testing.assert_array_almost_equal(result, expected_output, decimal=5)


def test_bh4_model() -> None:
    """Test the BH4 model."""
    theta = [0, 0, 0.9, 0.2, 0.9, -0.2, 1.01, 0, 0.01, 1]
    n = 100
    seed = 42
    expected_output = np.array(
        [
            [0.08162246],
            [0.01518795],
            [0.0389381],
            [0.06481314],
            [-0.03167937],
            [-0.07550877],
            [-0.04828303],
            [-0.04554649],
            [-0.03227944],
            [-0.05596049],
            [-0.00456788],
            [0.02865612],
            [0.02319651],
            [0.06066374],
            [0.06145787],
            [0.00871906],
            [0.01960806],
            [-0.02412119],
            [0.01714444],
            [0.01077186],
            [4.172e-05],
            [-0.02715309],
            [0.02899408],
            [0.01516408],
            [-0.00669485],
            [-0.01903755],
            [0.00759759],
            [0.02028846],
            [0.03070637],
            [0.03862254],
            [0.11183309],
            [0.0631743],
            [0.02264867],
            [-0.01730684],
            [0.01156946],
            [0.05333543],
            [0.03340287],
            [-0.01044686],
            [-0.04078947],
            [-0.00319678],
            [0.02796493],
            [0.04157364],
            [0.00282316],
            [0.01038224],
            [0.01199221],
            [0.01703188],
            [0.04645603],
            [0.04174959],
            [0.05582337],
            [0.04178035],
            [0.04021709],
            [0.05293433],
            [-0.02064256],
            [-0.0284747],
            [-0.03858314],
            [-0.05233422],
            [-0.04756549],
            [0.02622807],
            [-0.01459457],
            [0.02737786],
            [-0.0467665],
            [-0.04727375],
            [-0.02643611],
            [0.00525546],
            [0.0324541],
            [0.05452664],
            [0.02454655],
            [-0.00184605],
            [0.03216834],
            [0.01547663],
            [-0.04009435],
            [-0.07386154],
            [-0.08844246],
            [-0.0421084],
            [-0.02268923],
            [0.01196387],
            [-0.00791187],
            [0.00037916],
            [0.02520534],
            [0.00577081],
            [0.02171413],
            [-0.01079571],
            [-0.02253499],
            [-0.0310218],
            [-0.06910108],
            [-0.02953476],
            [-0.03832997],
            [-0.02633743],
            [0.00096724],
            [0.01890278],
            [0.03985309],
            [0.02423046],
            [-0.00022935],
            [-0.0038057],
            [-0.06954288],
            [-0.10698327],
            [-0.12752616],
            [-0.12860932],
            [-0.07361663],
            [0.0],
        ],
    )
    result = BH4(theta, n, seed=seed)
    assert result.shape == (n, 1)
    np.testing.assert_array_almost_equal(result, expected_output, decimal=5)
